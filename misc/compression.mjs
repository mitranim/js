/*
This script compares multiple compression algorithms on various metrics,
across multiple quality levels. This helps us choose the preferred algorithms
and settings for `HttpCompressionRamCache`.

This assumes the presence of a certain source file, which was downloaded from:

  https://sun.aei.polsl.pl/~sdeor/index.php?page=silesia

TODO use a more diverse source dataset, preferably something representative
of static assets commonly served by web apps.

Results from Bun 1.2.18 on M3 Pro:

  ┌────┬─────────┬─────┬────────────────────┬─────────────────────┬────────────────────────┐
  │    │ algo    │ lvl │ time               │ ratio               │ eff                    │
  ├────┼─────────┼─────┼────────────────────┼─────────────────────┼────────────────────────┤
  │  0 │ zstd    │ 1   │ 117.74643750000001 │ 0.3295376365247123  │ 0.002798705791202492   │
  │  1 │ zstd    │ 2   │ 154.40939575000004 │ 0.3089166827047146  │ 0.00200063397181395    │
  │  2 │ zstd    │ 3   │ 185.30949974999993 │ 0.2935619090640631  │ 0.0015841708571881416  │
  │  3 │ zstd    │ 4   │ 192.76129175       │ 0.2891005297488443  │ 0.0014997851857300821  │
  │  4 │ zstd    │ 5   │ 300.53593724999996 │ 0.27051830347900657 │ 0.000900119652758787   │
  │  5 │ zstd    │ 6   │ 428.27257275       │ 0.2606753761689072  │ 0.0006086669862958372  │
  │  6 │ zstd    │ 7   │ 510.8699165000003  │ 0.25460075294685414 │ 0.0004983670886145318  │
  │  7 │ zstd    │ 8   │ 676.5991252499991  │ 0.2512546762497611  │ 0.0003713493956364843  │
  │  8 │ zstd    │ 9   │ 685.4558017500003  │ 0.24743412740142884 │ 0.0003609775083524249  │
  │  9 │ zstd    │ 10  │ 965.0173434999988  │ 0.24257830738216773 │ 0.0002513719665414159  │
  │ 10 │ zstd    │ 11  │ 1401.6494999999995 │ 0.2396461606625755  │ 0.00017097438458229077 │
  │ 11 │ bro     │ 0   │ 131.5599892500004  │ 0.35117745965183716 │ 0.002669333295433027   │
  │ 12 │ bro     │ 1   │ 200.34709400000065 │ 0.3247093378680949  │ 0.0016207339541849997  │
  │ 13 │ bro     │ 2   │ 287.5371977499999  │ 0.30535101399578274 │ 0.0010619530842797984  │
  │ 14 │ bro     │ 3   │ 308.3761355000006  │ 0.2994554364134353  │ 0.0009710720186823105  │
  │ 15 │ bro     │ 4   │ 368.15899999999874 │ 0.2651122732903632  │ 0.0007201026548050274  │
  │ 16 │ bro     │ 5   │ 731.1334477500013  │ 0.2556814669286688  │ 0.00034970560807401975 │
  │ 17 │ bro     │ 6   │ 937.1618022500006  │ 0.24811412937833582 │ 0.0002647505785902145  │
  │ 18 │ bro     │ 7   │ 1353.7298334999996 │ 0.24183544767427964 │ 0.00017864380446505076 │
  │ 19 │ gzip    │ 0   │ 98.86294799999814  │ 1.0001529956207265  │ 0.01011656050981552    │
  │ 20 │ gzip    │ 1   │ 276.53217700000096 │ 0.3462464322629678  │ 0.0012521017843900553  │
  │ 21 │ gzip    │ 2   │ 290.73367699999835 │ 0.3327589384549729  │ 0.0011445489971737082  │
  │ 22 │ gzip    │ 3   │ 333.0917500000014  │ 0.3225142137225084  │ 0.0009682443762792294  │
  │ 23 │ gzip    │ 4   │ 351.78433324999787 │ 0.30813974088866214 │ 0.0008759336666356901  │
  │ 24 │ gzip    │ 5   │ 482.60213549999935 │ 0.2956882659836223  │ 0.0006126957264233297  │
  │ 25 │ gzip    │ 6   │ 615.590656250004   │ 0.2920473657846942  │ 0.0004744181264279745  │
  │ 26 │ gzip    │ 7   │ 686.641906249999   │ 0.2904601477764512  │ 0.0004230154686636585  │
  │ 27 │ gzip    │ 8   │ 798.5849272500036  │ 0.28966123228698204 │ 0.00036271813103767886 │
  │ 28 │ gzip    │ 9   │ 799.1009582500028  │ 0.2896611116850423  │ 0.000362483749637077   │
  │ 29 │ deflate │ 0   │ 93.26307274999999  │ 1.000152706176071   │ 0.01072399478898867    │
  │ 30 │ deflate │ 1   │ 274.18534349999936 │ 0.34624614281831245 │ 0.0012628178384681355  │
  │ 31 │ deflate │ 2   │ 288.07259349999913 │ 0.33275864901031754 │ 0.0011551208150952358  │
  │ 32 │ deflate │ 3   │ 328.7854167500009  │ 0.3225139242778531  │ 0.0009809252717649687  │
  │ 33 │ deflate │ 4   │ 347.56793775000006 │ 0.30813945144400684 │ 0.0008865589082778012  │
  │ 34 │ deflate │ 5   │ 478.4581249999992  │ 0.295687976538967   │ 0.0006180017875941964  │
  │ 35 │ deflate │ 6   │ 610.8407394999995  │ 0.2920470763400389  │ 0.00047810674281334366 │
  │ 36 │ deflate │ 7   │ 684.2733855000006  │ 0.2904598583317959  │ 0.0004244792571021245  │
  │ 37 │ deflate │ 8   │ 790.9448962499991  │ 0.28966094284232674 │ 0.00036622139445574185 │
  │ 38 │ deflate │ 9   │ 794.8757914999987  │ 0.28966082224038703 │ 0.0003644101699131788  │
  └────┴─────────┴─────┴────────────────────┴─────────────────────┴────────────────────────┘

Results from Deno 2.4.2 on M3 Pro:

  ┌───────┬───────────┬─────┬────────────────────┬─────────────────────┬────────────────────────┐
  │ (idx) │ algo      │ lvl │ time               │ ratio               │ eff                    │
  ├───────┼───────────┼─────┼────────────────────┼─────────────────────┼────────────────────────┤
  │     0 │ "bro"     │ 0   │ 212.43706249999997 │ 0.35117745965183716 │ 0.0016530894163151839  │
  │     1 │ "bro"     │ 1   │ 274.101344         │ 0.3247093378680949  │ 0.0011846324178114754  │
  │     2 │ "bro"     │ 2   │ 394.1673749999999  │ 0.3327792237012335  │ 0.0008442586698131309  │
  │     3 │ "bro"     │ 3   │ 424.64652075000015 │ 0.3136884190516042  │ 0.0007387047902749221  │
  │     4 │ "bro"     │ 4   │ 523.5975105000007  │ 0.2750047921180747  │ 0.000525221733494232   │
  │     5 │ "bro"     │ 5   │ 898.4760942499995  │ 0.2554938585512431  │ 0.00028436355756856943 │
  │     6 │ "bro"     │ 6   │ 1122.6752917500003 │ 0.24792951192901524 │ 0.0002208381299124776  │
  │     7 │ "bro"     │ 7   │ 1584.294719        │ 0.2416887715951944  │ 0.0001525529112081793  │
  │     8 │ "gzip"    │ 0   │ 37.06030174999978  │ 1.0001529956207265  │ 0.0269871789595111     │
  │     9 │ "gzip"    │ 1   │ 186.79345850000027 │ 0.45606566611599014 │ 0.002441550522048873   │
  │    10 │ "gzip"    │ 2   │ 292.25774999999976 │ 0.34132678969720787 │ 0.001167896453377911   │
  │    11 │ "gzip"    │ 3   │ 345.5583332499991  │ 0.3135997525055234  │ 0.0009075161046069903  │
  │    12 │ "gzip"    │ 4   │ 404.8545210000002  │ 0.3027193349488044  │ 0.0007477237359263779  │
  │    13 │ "gzip"    │ 5   │ 423.0386145000002  │ 0.29656955259791895 │ 0.000701046056867508   │
  │    14 │ "gzip"    │ 6   │ 529.3484477499997  │ 0.29422145695199386 │ 0.0005558181160303479  │
  │    15 │ "gzip"    │ 7   │ 772.4062600000007  │ 0.29046152263856395 │ 0.0003760476030302547  │
  │    16 │ "gzip"    │ 8   │ 880.1363850000016  │ 0.28966118404620617 │ 0.00032910943006430265 │
  │    17 │ "gzip"    │ 9   │ 948.7831767499993  │ 0.2922023392772321  │ 0.0003079758857847311  │
  │    18 │ "deflate" │ 0   │ 39.49789575000068  │ 1.000152706176071   │ 0.025321670615226482   │
  │    19 │ "deflate" │ 1   │ 194.30034424999758 │ 0.45606537667133484 │ 0.002347218572523659   │
  │    20 │ "deflate" │ 2   │ 299.99852075000126 │ 0.3413265002525525  │ 0.0011377606109497828  │
  │    21 │ "deflate" │ 3   │ 354.0210729999999  │ 0.31359946306086806 │ 0.0008858214580375224  │
  │    22 │ "deflate" │ 4   │ 415.5812917500007  │ 0.302719045504149   │ 0.0007284231786022127  │
  │    23 │ "deflate" │ 5   │ 436.00257299999976 │ 0.2965692631532636  │ 0.000680200717882607   │
  │    24 │ "deflate" │ 6   │ 535.3629582499998  │ 0.29422116750733857 │ 0.0005495732623510074  │
  │    25 │ "deflate" │ 7   │ 760.1178230000023  │ 0.29046123319390865 │ 0.00038212659196376684 │
  │    26 │ "deflate" │ 8   │ 893.2492917499985  │ 0.28966089460155087 │ 0.00032427777696197803 │
  │    27 │ "deflate" │ 9   │ 938.8070100000004  │ 0.29220204983257675 │ 0.00031124826159167326 │
  └───────┴───────────┴─────┴────────────────────┴─────────────────────┴────────────────────────┘

Results from Node 24.4.1 on M3 Pro:

  ┌─────────┬───────────┬─────┬────────────────────┬─────────────────────┬─────────────────────────┐
  │ (index) │ algo      │ lvl │ time               │ ratio               │ eff                     │
  ├─────────┼───────────┼─────┼────────────────────┼─────────────────────┼─────────────────────────┤
  │ 0       │ 'zstd'    │ 1   │ 154.66310449999997 │ 0.3295376365247123  │ 0.0021306803428655626   │
  │ 1       │ 'zstd'    │ 2   │ 194.81124999999994 │ 0.3089166827047146  │ 0.0015857230149938194   │
  │ 2       │ 'zstd'    │ 3   │ 221.37015600000007 │ 0.2935619090640631  │ 0.0013261133043790375   │
  │ 3       │ 'zstd'    │ 4   │ 226.07178125000007 │ 0.2891005297488443  │ 0.0012787997164013332   │
  │ 4       │ 'zstd'    │ 5   │ 331.13410424999995 │ 0.27051830347900657 │ 0.0008169448571046926   │
  │ 5       │ 'zstd'    │ 6   │ 468.79655200000025 │ 0.2606753761689072  │ 0.0005560522470926942   │
  │ 6       │ 'zstd'    │ 7   │ 557.0207810000004  │ 0.25460075294685414 │ 0.000457075860778081    │
  │ 7       │ 'zstd'    │ 8   │ 724.0147394999999  │ 0.2512546762497611  │ 0.00034702978066893504  │
  │ 8       │ 'zstd'    │ 9   │ 733.7116559999995  │ 0.24743412740142884 │ 0.0003372361954154767   │
  │ 9       │ 'zstd'    │ 10  │ 1031.9631664999993 │ 0.24257830738216773 │ 0.0002350648891906627   │
  │ 10      │ 'zstd'    │ 11  │ 1482.3723747500007 │ 0.2396461606625755  │ 0.0001616639413581836   │
  │ 11      │ 'zstd'    │ 12  │ 1604.6552082499984 │ 0.23921182483687442 │ 0.0001490736599407879   │
  │ 12      │ 'zstd'    │ 13  │ 3441.487249750001  │ 0.23744375215983    │ 0.00006899451746540062  │
  │ 13      │ 'zstd'    │ 14  │ 4373.653177        │ 0.23394234016437995 │ 0.000053489001230053395 │
  │ 14      │ 'zstd'    │ 15  │ 6542.898333499999  │ 0.23044063872427462 │ 0.000035219963230118655 │
  │ 15      │ 'zstd'    │ 16  │ 7373.728031000002  │ 0.22103465224177418 │ 0.000029975970270739445 │
  │ 16      │ 'zstd'    │ 17  │ 10294.182218750004 │ 0.21540770341995502 │ 0.00002092518850381409  │
  │ 17      │ 'zstd'    │ 18  │ 13074.092104250005 │ 0.21232562436890512 │ 0.000016240181167140795 │
  │ 18      │ 'zstd'    │ 19  │ 15757.941458000008 │ 0.2093633271643833  │ 0.000013286210494080336 │
  │ 19      │ 'zstd'    │ 20  │ 18285.95380199999  │ 0.20453560739707655 │ 0.000011185394517113233 │
  │ 20      │ 'zstd'    │ 21  │ 18836.74407325001  │ 0.20343728553206308 │ 0.000010800023865109662 │
  │ 21      │ 'zstd'    │ 22  │ 22437.436489500004 │ 0.2033452662520581  │ 0.00000906276732403085  │
  │ 22      │ 'bro'     │ 0   │ 172.80944774998352 │ 0.35117745965183716 │ 0.0020321658579680905   │
  │ 23      │ 'bro'     │ 1   │ 237.8712502499984  │ 0.3247093378680949  │ 0.0013650634010071887   │
  │ 24      │ 'bro'     │ 2   │ 330.92268749998766 │ 0.30535101399578274 │ 0.0009227261397597411   │
  │ 25      │ 'bro'     │ 3   │ 383.4083644999919  │ 0.2994554364134353  │ 0.0007810352202512828   │
  │ 26      │ 'bro'     │ 4   │ 457.59629150001274 │ 0.2651122732903632  │ 0.0005793584393381295   │
  │ 27      │ 'bro'     │ 5   │ 787.3541142500035  │ 0.2556814669286688  │ 0.00032473503637206355  │
  │ 28      │ 'bro'     │ 6   │ 1010.8791142499977 │ 0.24811412937833582 │ 0.0002454439169637206   │
  │ 29      │ 'bro'     │ 7   │ 1431.7701872499601 │ 0.24183544767427964 │ 0.0001689066093342672   │
  │ 30      │ 'bro'     │ 8   │ 1963.7506557500456 │ 0.2373995877295052  │ 0.00012089090182319074  │
  │ 31      │ 'bro'     │ 9   │ 2739.4277715000208 │ 0.23421135485111533 │ 0.00008549645195531797  │
  │ 32      │ 'gzip'    │ 0   │ 81.14212474995293  │ 1.0001529956207265  │ 0.012325940424937008    │
  │ 33      │ 'gzip'    │ 1   │ 359.1119267499598  │ 0.36159486224159015 │ 0.0010069140992172035   │
  │ 34      │ 'gzip'    │ 2   │ 397.84021874997416 │ 0.3437085332843143  │ 0.0008639361157709413   │
  │ 35      │ 'gzip'    │ 3   │ 504.9116667500057  │ 0.32870731629014055 │ 0.0006510194513942411   │
  │ 36      │ 'gzip'    │ 4   │ 566.2237187500286  │ 0.3136134770062633  │ 0.0005538684915894782   │
  │ 37      │ 'gzip'    │ 5   │ 824.5969372499385  │ 0.30020256542998947 │ 0.0003640597628596296   │
  │ 38      │ 'gzip'    │ 6   │ 1109.3078539999842 │ 0.29460542940766865 │ 0.00026557589793074055  │
  │ 39      │ 'gzip'    │ 7   │ 1284.4325212500407 │ 0.2925907740046764  │ 0.0002277976998900028   │
  │ 40      │ 'gzip'    │ 8   │ 1586.5579060000018 │ 0.2912226897209013  │ 0.00018355629417594101  │
  │ 41      │ 'gzip'    │ 9   │ 1595.4864579999994 │ 0.29121719027245013 │ 0.00018252564214020438  │
  │ 42      │ 'deflate' │ 0   │ 82.0874270000204   │ 1.000152706176071   │ 0.012183993855427124    │
  │ 43      │ 'deflate' │ 1   │ 367.6947395000316  │ 0.3615945727969348  │ 0.0009834096981877103   │
  │ 44      │ 'deflate' │ 2   │ 405.02150024997536 │ 0.3437082438396589  │ 0.0008486172798913774   │
  │ 45      │ 'deflate' │ 3   │ 509.26784374998533 │ 0.32870702684548525 │ 0.0006454501906600984   │
  │ 46      │ 'deflate' │ 4   │ 566.318322749983   │ 0.313613187561608   │ 0.0005537754562464709   │
  │ 47      │ 'deflate' │ 5   │ 819.6539585000137  │ 0.3002022759853341  │ 0.00036625489680390424  │
  │ 48      │ 'deflate' │ 6   │ 1100.6463852499437 │ 0.2946051399630133  │ 0.00026766556807989876  │
  │ 49      │ 'deflate' │ 7   │ 1273.8002292499878 │ 0.29259048456002107 │ 0.0002296988788676055   │
  │ 50      │ 'deflate' │ 8   │ 1573.8792710000125 │ 0.29122240027624596 │ 0.00018503477721719332  │
  │ 51      │ 'deflate' │ 9   │ 1577.4926562500477 │ 0.29121690082779483 │ 0.00018460745263947152  │
  └─────────┴───────────┴─────┴────────────────────┴─────────────────────┴─────────────────────────┘
*/

// deno-lint-ignore-file no-process-global
/* global process */

import * as fs from 'node:fs'
import * as z from 'node:zlib'
import * as l from '../lang.mjs'
import * as i from '../iter.mjs'

const SRC = fs.readFileSync(new URL(`./webster`, import.meta.url), {encoding: `utf8`})
const OUT = []
const RUNS = 4

// `i.range` is "[min,max)".
const ZSTD_LVLS = i.range(1, 12) // Skip 12..22: too slow.
const BROTLI_LVLS = i.range(0, 8) // Skip 8..12: too slow.
const GZIP_LVLS = i.range(0, 10)
const DEFLATE_LVLS = i.range(0, 10)
const ZSTD_LVL = 100 // z.constants.ZSTD_c_compressionLevel
const BRO_LVL = 1 // z.constants.BROTLI_PARAM_QUALITY

function zstd(src, level) {
  return encode(z.zstdCompress, src, {params: {[ZSTD_LVL]: level}})
}
function bro(src, level) {
  return encode(z.brotliCompress, src, {params: {[BRO_LVL]: level}})
}
function gzip(src, level) {return encode(z.gzip, src, {level})}
function deflate(src, level) {return encode(z.deflate, src, {level})}

function encode(fun, src, opt) {
  const {promise, reject, resolve} = Promise.withResolvers()
  function done(err, val) {if (err) {reject(err)} else {resolve(val)}}
  fun(src, opt, done)
  return promise
}

async function measures(algo, fun, lvls) {
  for (const lvl of lvls) await measure(algo, fun, lvl)
}

async function measure(algo, fun, lvl) {
  let time = 0
  let coded

  for (const run of i.span(RUNS + 1)) {
    if (l.isSome(process.exitCode)) return
    console.warn(`[comp] algo = ${algo}, lvl = ${lvl}, run = ${run}`)
    const start = performance.now()
    coded = await fun(SRC, lvl)
    const end = performance.now()
    time += end - start
  }

  time /= RUNS
  const ratio = coded.length / SRC.length
  const eff = ratio / time
  OUT.push({algo, lvl, time, ratio, eff})
}

process.once(`SIGINT`, onSigint)

function onSigint() {
  process.exitCode = 0
  console.log()
  console.table(OUT)
}

if (z.zstdCompress) await measures(`zstd`, zstd, ZSTD_LVLS)
if (z.brotliCompress) await measures(`bro`, bro, BROTLI_LVLS)
if (z.gzip) await measures(`gzip`, gzip, GZIP_LVLS)
if (z.deflate) await measures(`deflate`, deflate, DEFLATE_LVLS)

console.table(OUT)
